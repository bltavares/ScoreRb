--- 
:churn: 
  :changes: []

  :class_churn: 
  - klass: &id001 
      file: lib/scorerb.rb
      klass: String
    times_changed: 1
  :method_churn: 
  - method: &id002 
      file: lib/scorerb.rb
      klass: String
      method: String#score
    times_changed: 1
  :changed_files: 
  - lib/scorerb.rb
  - spec/03-16-2011.html
  - /dev/null
  - spec/scorerb_spec.rb
  - tmp/1ce481ca0dccc3ac9aa26238e921a22c343235ff.json
  :changed_classes: 
  - *id001
  :changed_methods: 
  - *id002
:flog: 
  :total: 66.54667534896092
  :average: 66.54667534896092
  :method_containers: 
  - :name: String
    :path: lib/scorerb.rb
    :total_score: 66.54667534896092
    :highest_score: 66.54667534896092
    :average_score: 66.54667534896092
    :methods: 
      String#score: 
        :operators: 
          :assignment: 32.500000000000014
          :branch: 15.000000000000004
          :==: 7.900000000000002
          :lit_fixnum: 2.400000000000001
          :size: 3.7000000000000006
          :-: 4.900000000000001
          :each: 1.1
          :[]: 4.400000000000001
          :upcase: 1.6000000000000003
          :index: 2.8000000000000007
          :downcase: 1.6000000000000003
          :min: 1.3000000000000003
          :>: 2.7000000000000006
          :max: 1.4000000000000004
          :+: 11.300000000000006
          :slice: 1.3000000000000005
          :/: 5.000000000000002
          :*: 1.5000000000000002
          :<=: 1.2000000000000004
        :score: 66.54667534896092
        :path: lib/scorerb.rb:3
:flay: 
  :total_score: "0"
  :matches: []

:reek: 
  :matches: 
  - :file_path: lib/scorerb.rb
    :code_smells: 
    - :method: Scorerb::::String
      :message: has no descriptive comment
      :type: IrresponsibleModule
    - :method: Scorerb::::String#score
      :message: has approx 30 statements
      :type: LongMethod
    - :method: Scorerb::::String#score
      :message: has the variable name 'i'
      :type: UncommunicativeName
    - :method: Scorerb::::String#score
      :message: refers to word more than self
      :type: LowCohesion
  - :file_path: lib/scorerb/version.rb
    :code_smells: []

:roodi: 
  :total: 
  - Found 3 errors.
  :problems: 
  - :file: lib/scorerb.rb
    :line: "16"
    :problem: Block cyclomatic complexity is 9.  It should be 4 or less.
  - :file: lib/scorerb.rb
    :line: "3"
    :problem: Method name "score" cyclomatic complexity is 12.  It should be 8 or less.
  - :file: lib/scorerb.rb
    :line: "3"
    :problem: Method "score" has 56 lines.  It should have 20 or less.
:rcov: 
  lib/scorerb.rb: 
    :lines: 
    - :content: "   module Scorerb"
      :was_run: false
    - :content: "     class ::String"
      :was_run: true
    - :content: "   \tdef score(abrv, fuzzines = 0)"
      :was_run: true
    - :content: "   \t\t# If strings are equal return exact one"
      :was_run: false
    - :content: "   \t\treturn 1.0 if self == abrv"
      :was_run: false
    - :content: "   \t\ttotal_char_score = 0"
      :was_run: false
    - :content: "   \t\tfuzzies = 1"
      :was_run: true
    - :content: "   \t\tbonus_starting_string = false"
      :was_run: true
    - :content: "   \t\tabrv_size = abrv.size"
      :was_run: true
    - :content: "   \t\tword_size = self.size"
      :was_run: true
    - :content: "   \t\tword = self"
      :was_run: true
    - :content: "   \t\tfinal_score = 0"
      :was_run: true
    - :content: "   \t\t(0..abrv_size-1).each do |i|"
      :was_run: true
    - :content: "   \t\t\tchar = abrv[i]"
      :was_run: true
    - :content: "   \t\t\tindex_char_upper = word.index(char.upcase) || -1"
      :was_run: true
    - :content: "   \t\t\tindex_char_lower = word.index(char.downcase) || -1"
      :was_run: true
    - :content: "   \t\t\tmin_index = [index_char_upper, index_char_lower].min"
      :was_run: true
    - :content: "   \t\t\tindex_in_string = min_index > -1 ? min_index : [index_char_upper, index_char_lower].max"
      :was_run: false
    - :content: "   \t\t\tif index_in_string == -1"
      :was_run: false
    - :content: "   \t\t\t\tif fuzzines > 0"
      :was_run: true
    - :content: "   \t\t\t\t\tfuzzies += 1 - fuzzines"
      :was_run: true
    - :content: "   \t\t\t\t\tnext"
      :was_run: true
    - :content: "   \t\t\t\telse"
      :was_run: true
    - :content: "   \t\t\t\t\treturn 0"
      :was_run: false
    - :content: "   \t\t\t\tend"
      :was_run: true
    - :content: "   \t\t\telse"
      :was_run: false
    - :content: "   \t\t\t\tchar_score = 0.1"
      :was_run: false
    - :content: "   \t\t\tend"
      :was_run: true
    - :content: "   \t\t\tchar_score += 0.1 if word[index_in_string] == char"
      :was_run: false
    - :content: "   \t\t\tif index_in_string == 0"
      :was_run: false
    - :content: "   \t\t\t\tchar_score += 0.6"
      :was_run: true
    - :content: "   \t\t\t\tbonus_starting_string = i == 0"
      :was_run: true
    - :content: "   \t\t\telse"
      :was_run: true
    - :content: "   \t\t\t\tchar_score += 0.8 if word[index_in_string - 1] == \" \"\t\t\t"
      :was_run: false
    - :content: "   \t\t\tend"
      :was_run: true
    - :content: "   \t\t\tword = word.slice index_in_string + 1, word.size"
      :was_run: false
    - :content: "   \t\t\ttotal_char_score += char_score"
      :was_run: false
    - :content: "   \t\tend"
      :was_run: true
    - :content: "   \t\tabrv_score = total_char_score / abrv_size"
      :was_run: false
    - :content: "   \t\t#Reduce penalty for longer words"
      :was_run: false
    - :content: "           final_score = ((abrv_score * (abrv_size/word_size)) + abrv_score) / 2"
      :was_run: false
    - :content: "   \t\t#Reduce using fuzzies"
      :was_run: false
    - :content: "           final_score = final_score / fuzzies"
      :was_run: false
    - :content: "   \t\tfinal_score += 0.15 if bonus_starting_string && final_score <= 0.85"
      :was_run: false
    - :content: "   \t\tfinal_score"
      :was_run: true
    - :content: "   \tend"
      :was_run: true
    - :content: "     end"
      :was_run: true
    - :content: "   end"
      :was_run: true
    :percent_run: 58
    :methods: 
      Scorerb::s(:colon3, :String)#score: 43.18181818181818
  :global_percent_run: 58.3
:hotspots: 
  :files: 
  - :location: !ruby/object:MetricFu::Location 
      class_name: 
      file_path: lib/scorerb.rb:3
      hash: 860265593509872242
      method_name: 
    :details: 
      :flog: complexity is 66.5
  - :location: !ruby/object:MetricFu::Location 
      class_name: 
      file_path: lib/scorerb.rb
      hash: 3964370373965147312
      method_name: 
    :details: 
      :reek: found 4 code smells
      :roodi: found 3 design problems
      :rcov: uncovered code is 43.2%
  :classes: 
  - :location: !ruby/object:MetricFu::Location 
      class_name: String
      file_path: lib/scorerb.rb
      hash: 483926040277957368
      method_name: 
    :details: 
      :reek: found 4 code smells
      :flog: complexity is 66.5
  - :location: !ruby/object:MetricFu::Location 
      class_name: Scorerb::s(:colon3, :String)
      file_path: lib/scorerb.rb
      hash: 3426808089991165800
      method_name: 
    :details: 
      :rcov: uncovered code is 43.2%
  :methods: 
  - :location: !ruby/object:MetricFu::Location 
      class_name: String
      file_path: lib/scorerb.rb
      hash: -1680422783609591378
      method_name: String#score
      simple_method_name: "#score"
    :details: 
      :reek: found 3 code smells
      :flog: complexity is 66.5
  - :location: !ruby/object:MetricFu::Location 
      class_name: Scorerb::s(:colon3, :String)
      file_path: lib/scorerb.rb
      hash: -1011844441278481475
      method_name: Scorerb#s(:colon3, :String)#score
      simple_method_name: Scorerb#s(:colon3, :String)#score
    :details: 
      :rcov: uncovered code is 43.2%
